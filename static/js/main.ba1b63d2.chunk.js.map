{"version":3,"sources":["dummy/data.js","components/Form.js","App.js","index.js"],"names":["data","question","options","Form","totalQuestion","dummyData","length","useState","map","Array","fill","answers","setAnswers","enableInput","setEnableInput","questionIndex","setquestionIndex","checked","setChecked","handleCheck","e","index","parseInt","target","name","split","pop","tempState","className","option","i","htmlFor","type","id","onChange","disabled","onClick","style","visibility","includes","tempAnswers","tempEnableInput","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAmBeA,EAnBF,CACX,CACEC,SAAU,oBACVC,QAAS,CAAC,KAAM,UAElB,CACED,SAAU,gBACVC,QAAS,CAAC,KAAM,QAAS,YAAa,WAExC,CACED,SAAU,gBACVC,QAAS,CAAC,KAAM,QAAS,WAE3B,CACED,SAAU,gBACVC,QAAS,CAAC,KAAM,QAAS,uB,OCyFdC,EArGF,WACX,IAAMC,EAAgBC,EAAUC,OAGhC,EAA8BC,oBAAS,kBACrCF,EAAUG,KAAI,SAACP,GAAD,OAAc,IAAIQ,MAAMR,EAASC,QAAQI,QAAQI,MAAK,SADtE,mBAAOC,EAAP,KAAgBC,EAAhB,KAGA,EAAsCL,mBACpC,IAAIE,MAAML,GAAeM,MAAK,IADhC,mBAAOG,EAAP,KAAoBC,EAApB,KAGA,EAA0CP,mBAAS,GAAnD,mBAAOQ,EAAP,KAAsBC,EAAtB,KACA,EAA8BT,mBAASI,EAAQ,IAA/C,mBAAOM,EAAP,KAAgBC,EAAhB,KAIMC,EAAc,SAACC,GACnB,IAAMC,EAAQC,SAASF,EAAEG,OAAOC,KAAKC,MAAM,IAAIC,MAAO,IAEhDC,EAAS,YAAOV,GACtBU,EAAUN,GAASD,EAAEG,OAAON,QAC5BC,EAAWS,IA8Bb,OACE,sBAAKC,UAAU,OAAf,UACE,mBAAGA,UAAU,iBAAb,SAA+BvB,EAAUU,GAAed,WACxD,sBACE2B,UACEf,EAAYE,GACR,kBACA,4BAJR,SAOGV,EAAUU,GAAeb,QAAQM,KAAI,SAACqB,EAAQC,GAAT,OACpC,wBAAOC,QAAO,gBAAWD,GAAKF,UAAU,cAAxC,UACE,uBACEI,KAAK,WACLC,GAAE,gBAAWH,GACbF,UAAU,cACVJ,KAAI,gBAAWM,GACfb,QAASA,EAAQa,GACjBI,SAAUf,EACVgB,UAAWtB,EAAYE,KAEzB,sBAAMa,UAAU,mBAAhB,SAAoCC,YAI1C,sBAAKD,UAAU,kBAAf,UACE,wBACEI,KAAK,SACLJ,UAAU,YACVQ,QAnCW,WACjBlB,EAAWP,EAAQI,EAAgB,IACnCC,EAAiBD,EAAgB,IAkC3BsB,MACoB,IAAlBtB,EACI,CAAEuB,WAAY,UACd,CAAEA,WAAY,WAPtB,kBAYA,wBACEN,KAAK,SACLJ,UAAU,YACVK,GAAG,OACHG,QArEW,WACjB,GAAInB,EAAQsB,UAAS,GAAO,CAC1B,GAAI1B,EAAYE,GAAgB,CAC9B,IAAMyB,EAAW,YAAO7B,GACxB6B,EAAYzB,GAAiBE,EAC7BL,EAAW4B,GAGX,IAAMC,EAAe,YAAO5B,GAC5B4B,EAAgB1B,IAAiB,EACjCD,EAAe2B,GAIb1B,IAAkBX,EAAgB,IACpCc,EAAWP,EAAQI,EAAgB,IACnCC,EAAiBD,EAAgB,MAiDjC,SAMGA,IAAkBX,EAAgB,EAAI,SAAW,gBCrF7CsC,MARf,WACE,OACE,qBAAKd,UAAU,MAAf,SACE,cAAC,EAAD,OCDNe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ba1b63d2.chunk.js","sourcesContent":["const data = [\n  {\n    question: \"Apakah apa 11234?\",\n    options: [\"ya\", \"tidak\"],\n  },\n  {\n    question: \"Apakah apa 2?\",\n    options: [\"ya\", \"tidak\", \"bisa jadi\", \"asdasd\"],\n  },\n  {\n    question: \"Apakah apa 3?\",\n    options: [\"ya\", \"tidak\", \"no way\"],\n  },\n  {\n    question: \"Apakah apa 4?\",\n    options: [\"ya\", \"tidak\", \"over my dead body\"],\n  },\n];\n\nexport default data;\n","import React, { useState } from \"react\";\nimport dummyData from \"../dummy/data\";\n\nconst Form = () => {\n  const totalQuestion = dummyData.length;\n\n  /* States Start */\n  const [answers, setAnswers] = useState(() =>\n    dummyData.map((question) => new Array(question.options.length).fill(false))\n  );\n  const [enableInput, setEnableInput] = useState(\n    new Array(totalQuestion).fill(true)\n  );\n  const [questionIndex, setquestionIndex] = useState(0);\n  const [checked, setChecked] = useState(answers[0]);\n  /* States End */\n\n  /* Handlers Start */\n  const handleCheck = (e) => {\n    const index = parseInt(e.target.name.split(\"\").pop(), 10);\n\n    const tempState = [...checked];\n    tempState[index] = e.target.checked;\n    setChecked(tempState);\n  };\n\n  const handleNext = () => {\n    if (checked.includes(true)) {\n      if (enableInput[questionIndex]) {\n        const tempAnswers = [...answers];\n        tempAnswers[questionIndex] = checked;\n        setAnswers(tempAnswers);\n\n        // Disable future input change\n        const tempEnableInput = [...enableInput];\n        tempEnableInput[questionIndex] = false;\n        setEnableInput(tempEnableInput);\n      }\n\n      // Check if it's last question\n      if (questionIndex !== totalQuestion - 1) {\n        setChecked(answers[questionIndex + 1]);\n        setquestionIndex(questionIndex + 1);\n      }\n    }\n  };\n\n  const handlePrev = () => {\n    setChecked(answers[questionIndex - 1]);\n    setquestionIndex(questionIndex - 1);\n  };\n  /* Handlers End */\n\n  return (\n    <div className=\"main\">\n      <p className=\"main__subtitle\">{dummyData[questionIndex].question}</p>\n      <form\n        className={\n          enableInput[questionIndex]\n            ? \"main__form form\"\n            : \"main__form form--inactive\"\n        }\n      >\n        {dummyData[questionIndex].options.map((option, i) => (\n          <label htmlFor={`option${i}`} className=\"form__label\">\n            <input\n              type=\"checkbox\"\n              id={`option${i}`}\n              className=\"form__input\"\n              name={`option${i}`}\n              checked={checked[i]}\n              onChange={handleCheck}\n              disabled={!enableInput[questionIndex]}\n            />\n            <span className=\"form__label-text\">{option}</span>\n          </label>\n        ))}\n      </form>\n      <div className=\"main__btns btns\">\n        <button\n          type=\"button\"\n          className=\"btns__btn\"\n          onClick={handlePrev}\n          style={\n            questionIndex === 0\n              ? { visibility: \"hidden\" }\n              : { visibility: \"initial\" }\n          }\n        >\n          Prev\n        </button>\n        <button\n          type=\"button\"\n          className=\"btns__btn\"\n          id=\"next\"\n          onClick={handleNext}\n        >\n          {questionIndex === totalQuestion - 1 ? \"Submit\" : \"Next\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}